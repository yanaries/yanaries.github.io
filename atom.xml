<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>白羊独立博客</title>
  
  <subtitle>爱技术爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yanaries.github.io/"/>
  <updated>2018-07-20T07:06:33.570Z</updated>
  <id>http://yanaries.github.io/</id>
  
  <author>
    <name>Yan Chang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring 深入理解</title>
    <link href="http://yanaries.github.io/2018/07/20/spring-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://yanaries.github.io/2018/07/20/spring-深入理解/</id>
    <published>2018-07-20T05:39:12.000Z</published>
    <updated>2018-07-20T07:06:33.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识-Spring-框架"><a href="#认识-Spring-框架" class="headerlink" title="认识 Spring 框架"></a>认识 Spring 框架</h1><p>Spring 框架是 Java 应用最广的框架，它的成功来源于理念，而不是技术本身，它的理念包括 <strong>IoC (Inversion of Control，控制反转)</strong> 和 <strong>AOP(Aspect Oriented Programming，面向切面编程).</strong></p><h2 id="什么是-Spring："><a href="#什么是-Spring：" class="headerlink" title="什么是 Spring："></a>什么是 Spring：</h2><ol><li>Spring 是一个轻量级的 DI / IoC 和 AOP 容器的开源框架，来源于 Rod Johnson 在其著作《Expert one on one J2EE design and development》中阐述的部分理念和原型衍生而来。</li><li>Spring 提倡以“最少侵入”的方式来管理应用中的代码，这意味着我们可以随时安装或者卸载 Spring</li></ol><ul><li><strong>适用范围：任何 Java 应用</strong></li><li><strong>Spring 的根本使命：简化 Java 开发</strong><h2 id="Spring-的优势"><a href="#Spring-的优势" class="headerlink" title="Spring 的优势"></a>Spring 的优势</h2></li><li><strong>低侵入 / 低耦合 （降低组件之间的耦合度，实现软件各层之间的解耦）</strong></li><li><strong>声明式事务管理（基于切面和惯例）</strong></li><li><strong>方便集成其他框架（如MyBatis、Hibernate）</strong></li><li><strong>降低 Java 开发难度</strong></li><li><strong>Spring 框架中包括了 J2EE 三层的每一层的解决方案（一站式）</strong><h2 id="Spring-能帮我们做什么"><a href="#Spring-能帮我们做什么" class="headerlink" title="Spring 能帮我们做什么"></a>Spring 能帮我们做什么</h2>①. <strong>Spring 能帮我们根据配置文件创建及组装对象之间的依赖关系。</strong><br>②. <strong>Spring 面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制。</strong><br>③. <strong>Spring 能非常简单的帮我们管理数据库事务。</strong><br>④. <strong>Spring 还提供了与第三方数据访问框架（如Hibernate、JPA）无缝集成，而且自己也提供了一套JDBC访问模板来方便数据库访问。</strong><br>⑤. <strong>Spring 还提供与第三方Web（如Struts1/2、JSF）框架无缝集成，而且自己也提供了一套Spring MVC框架，来方便web层搭建。</strong><br>⑥. <strong>Spring 能方便的与Java EE（如Java Mail、任务调度）整合，与更多技术整合（比如缓存框架）。</strong><h1 id="Spring-IoC-概述"><a href="#Spring-IoC-概述" class="headerlink" title="Spring IoC 概述"></a>Spring IoC 概述</h1><strong>IoC：Inverse of Control（控制反转）</strong></li><li>读作“反转控制”，更好理解，不是什么技术，而是一种设计思想，就是将原本在程序中手动创建对象的控制权，交由Spring框架来管理。</li><li>正控：若要使用某个对象，需要自己去负责对象的创建</li><li>反控：若要使用某个对象，只需要从 Spring 容器中获取需要使用的对象，不关心对象的创建过程，也就是把创建对象的控制权反转给了Spring框架</li><li>好莱坞法则：Don’t call me ,I’ll call you<br><strong>控制反转是一种通过描述（在 Java 中可以是 XML 或者注解）并通过第三方（Spring）去产生或获取特定对象的方式。</strong></li><li>好处：<br>降低对象之间的耦合<br>我们不需要理解一个类的具体实现，只需要知道它有什么用就好了（直接向 IoC 容器拿）<h2 id="Spring-IoC-容器的设计"><a href="#Spring-IoC-容器的设计" class="headerlink" title="Spring IoC 容器的设计"></a>Spring IoC 容器的设计</h2>Spring IoC 容器的设计主要是基于以下两个接口：<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2></li><li>ApplicationContext<br>其中 ApplicationContext 是 BeanFactory 的子接口之一，<strong>换句话说：BeanFactory 是 Spring IoC 容器所定义的最底层接口，</strong> <strong>而 ApplicationContext 是其最高级接口之一，</strong>并对 BeanFactory 功能做了许多的扩展，所以在绝大部分的工作场景下，都会使用 ApplicationContext 作为 Spring IoC 容器。</li><li>BeanFactory<br>BeanFactory 位于设计的最底层，它提供了 Spring IoC 最底层的设计.<h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2>根据 ApplicationContext 的类继承关系图，可以看到 ApplicationContext 接口扩展了许许多多的接口，因此它的功能十分强大，所以在实际应用中常常会使用到的是 ApplicationContext 接口，因为 BeanFactory 的方法和功能较少，而 ApplicationContext 的方法和功能较多。<br><strong>BeanFactory 和 ApplicationContext 的区别：</strong><br><strong>BeanFactory：</strong>是Spring中最底层的接口，只提供了最简单的IoC功能,负责配置，创建和管理bean。<br>在应用中，一般不使用 BeanFactory，而推荐使用ApplicationContext（应用上下文），原因如下。<br><strong>ApplicationContext：</strong><br>1.继承了 BeanFactory，拥有了基本的 IoC 功能；<br>2.除此之外，ApplicationContext 还提供了以下功能：<br>① 支持国际化；<br>② 支持消息机制；<br>③ 支持统一的资源加载；<br>④ 支持AOP功能；<h2 id="Spring-IoC-的容器的初始化和依赖注入"><a href="#Spring-IoC-的容器的初始化和依赖注入" class="headerlink" title="Spring IoC 的容器的初始化和依赖注入"></a>Spring IoC 的容器的初始化和依赖注入</h2>虽然 Spring IoC 容器的生成十分的复杂，但是大体了解一下 Spring IoC 初始化的过程还是必要的。这对于理解 Spring 的一系列行为是很有帮助的。</li></ul><p><strong>注意：Bean 的定义和初始化在 Spring IoC 容器是两大步骤，它是先定义，然后初始化和依赖注入的。</strong></p><ul><li>Bean 的定义分为 3 步：<br>1.Resource 定位<br>Spring IoC 容器先根据开发者的配置，进行资源的定位，在 Spring 的开发中，通过 XML 或者注解都是十分常见的方式，定位的内容是由开发者提供的。<br>2.BeanDefinition 的载入<br>这个时候只是将 Resource 定位到的信息，保存到 Bean 定义（BeanDefinition）中，此时并不会创建 Bean 的实例<br>3.BeanDefinition 的注册<br>这个过程就是将 BeanDefinition 的信息发布到 Spring IoC 容器中<br>注意：此时仍然没有对应的 Bean 的实例。<br>做完了以上 3 步，Bean 就在 Spring IoC 容器中被定义了，而没有被初始化，更没有完成依赖注入，也就是没有注入其配置的资源给 Bean，那么它还不能完全使用。</li></ul><p>对于初始化和依赖注入，Spring Bean 还有一个配置选项——【lazy-init】，其含义就是是否初始化 Spring Bean。在没有任何配置的情况下，它的默认值为 default，实际值为 false，也就是 Spring IoC 默认会自动初始化 Bean。如果将其设置为 true，那么只有当我们使用 Spring IoC 容器的 getBean 方法获取它时，它才会进行 Bean 的初始化，完成依赖注入。</p><h2 id="IoC-是如何实现的"><a href="#IoC-是如何实现的" class="headerlink" title="IoC 是如何实现的"></a>IoC 是如何实现的</h2><p>最后我们简单说说IoC是如何实现的。想象一下如果我们自己来实现这个依赖注入的功能，我们怎么来做？ 无外乎：</p><ul><li>读取标注或者配置文件，看看JuiceMaker依赖的是哪个Source，拿到类名</li><li>使用反射的API，基于类名实例化对应的对象实例</li><li><p>将对象实例，通过构造函数或者 setter，传递给 JuiceMaker<br>我们发现其实自己来实现也不是很难，Spring实际也就是这么做的。这么看的话其实IoC就是一个工厂模式的升级版！当然要做一个成熟的IoC框架，还是非常多细致的工作要做，Spring不仅提供了一个已经成为业界标准的Java IoC框架，还提供了更多强大的功能，所以大家就别去造轮子啦！希望了解IoC更多实现细节不妨通过学习Spring的源码来加深理解！</p><h1 id="Spring-AOP-简介"><a href="#Spring-AOP-简介" class="headerlink" title="Spring AOP 简介"></a>Spring AOP 简介</h1><p>如果说 IoC 是 Spring 的核心，那么面向切面编程就是 Spring 最为重要的功能之一了，在数据库事务中切面编程被广泛使用。</p><h2 id="AOP-即-Aspect-Oriented-Program-面向切面编程"><a href="#AOP-即-Aspect-Oriented-Program-面向切面编程" class="headerlink" title="AOP 即 Aspect Oriented Program 面向切面编程"></a>AOP 即 Aspect Oriented Program 面向切面编程</h2><p>首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。</p></li><li><p>所谓的核心业务，比如登陆，增加数据，删除数据都叫核心业务</p></li><li>所谓的周边功能，比如性能统计，日志，事务管理等等<br>周边功能在 Spring 的面向切面编程AOP思想里，即被定义为切面</li></ul><p>在面向切面编程AOP的思想里面，核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 “编织” 在一起，这就叫AOP</p><h2 id="AOP-的目的"><a href="#AOP-的目的" class="headerlink" title="AOP 的目的"></a>AOP 的目的</h2><p>AOP能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p><h2 id="AOP-当中的概念："><a href="#AOP-当中的概念：" class="headerlink" title="AOP 当中的概念："></a>AOP 当中的概念：</h2><ul><li>切入点（Pointcut）<br>在哪些类，哪些方法上切入（where）</li><li>通知（Advice）<br>在方法执行的什么实际（when:方法前/方法后/方法前后）做什么（what:增强的功能）</li><li>切面（Aspect）<br>切面 = 切入点 + 通知，通俗点就是：在什么时机，什么地方，做什么增强！</li><li>织入（Weaving）<br>把切面加入到对象，并创建出代理对象的过程。（由 Spring 来完成）<br><strong>OP 的一个思想：让关注点代码与业务代码分离！</strong></li></ul><h2 id="实际的代码"><a href="#实际的代码" class="headerlink" title="实际的代码"></a>实际的代码</h2><p><strong>我们来实际的用代码感受一下</strong></p><p>1.在 Package【pojo】下新建一个【Landlord】类（我百度翻译的包租婆的英文）：</p><p>package pojo;</p><p>import org.springframework.stereotype.Component;</p><p>@Component(“landlord”)<br>public class Landlord {</p><pre><code>public void service() {    // 仅仅只是实现了核心的业务功能    System.out.println(&quot;签合同&quot;);    System.out.println(&quot;收房租&quot;);}</code></pre><p>}<br>2.在 Package【aspect】下新建一个中介商【Broker】类（我还是用的翻译…）：</p><p>package aspect;</p><p>import org.aspectj.lang.annotation.After;<br>import org.aspectj.lang.annotation.Aspect;<br>import org.aspectj.lang.annotation.Before;<br>import org.springframework.stereotype.Component;</p><p>@Component<br>@Aspect<br>class Broker {</p><pre><code>@Before(&quot;execution(* pojo.Landlord.service())&quot;)public void before(){    System.out.println(&quot;带租客看房&quot;);    System.out.println(&quot;谈价格&quot;);}@After(&quot;execution(* pojo.Landlord.service())&quot;)public void after(){    System.out.println(&quot;交钥匙&quot;);}</code></pre><p>}<br>3.在 applicationContext.xml 中配置自动注入，并告诉 Spring IoC 容器去哪里扫描这两个 Bean：</p><p>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemalocation="http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"><pre><code>&lt;context:component-scan base-package=&quot;aspect&quot; /&gt;&lt;context:component-scan base-package=&quot;pojo&quot; /&gt;&lt;aop:aspectj-autoproxy/&gt;</code></pre><p></p></beans><br>4.在 Package【test】下编写测试代码：<p></p><p>package test;</p><p>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;<br>import pojo.Landlord;</p><p>public class TestSpring {</p><pre><code>public static void main(String[] args) {    ApplicationContext context =            new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);    Landlord landlord = (Landlord) context.getBean(&quot;landlord&quot;, Landlord.class);    landlord.service();}</code></pre><p>}<br>5.执行看到效果：</p><p>  带租客看房<br>  谈价格<br>  签合同<br>  收房租<br>  交钥匙</p><p>这个例子使用了一些注解，现在看不懂没有关系，但我们可以从上面可以看到，我们在 Landlord 的 service() 方法中仅仅实现了核心的业务代码，其余的关注点功能是根据我们设置的切面自动补全的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;认识-Spring-框架&quot;&gt;&lt;a href=&quot;#认识-Spring-框架&quot; class=&quot;headerlink&quot; title=&quot;认识 Spring 框架&quot;&gt;&lt;/a&gt;认识 Spring 框架&lt;/h1&gt;&lt;p&gt;Spring 框架是 Java 应用最广的框架，它的成功来源
      
    
    </summary>
    
      <category term="blog" scheme="http://yanaries.github.io/categories/blog/"/>
    
    
      <category term="文章" scheme="http://yanaries.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习方法</title>
    <link href="http://yanaries.github.io/2018/07/18/learning/"/>
    <id>http://yanaries.github.io/2018/07/18/learning/</id>
    <published>2018-07-18T03:03:42.000Z</published>
    <updated>2018-07-19T06:05:51.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自我管理"><a href="#自我管理" class="headerlink" title="自我管理"></a>自我管理</h1><p><strong>学霸不会困，靠的不是体力，是自我管理.</strong><br>一天分成三个阶段，规律作息，精进细节，才可以游刃有余。身体大家都差不多，差别在于精力分配与时间规划。</p><h2 id="早晨篇"><a href="#早晨篇" class="headerlink" title="早晨篇"></a>早晨篇</h2><ul><li>早晨解决三件事:1.起床 2.清醒 3.专注先说起床。头天晚上晚睡，第二天难免晚起。所以别熬夜。一天都没有熬夜。真努力就别熬夜，熬夜是懒惰的证明。（博士生和企业员工被迫熬夜不在此列…默默同情比心）一天两天失眠导致晚睡，目测不会影响次日状态，不要长期熬夜就好。再说清醒。</li><li>早晨一定要见到阳光。早晨没有接触阳光，人难以完全清醒。我每天早晨起床先穿好衣服出门晒一会儿太阳，不到十分钟，就会神清气爽。这是由于阳光刺激大脑合成血清素，血清素调节我们的清醒度。</li><li>早晨要适度运动。所谓适度，就是把身体活动开，微微气喘就可以了，千万不要运动过度，否则过度劳累反而影响状态。<br>最后说专注。早晨千万不可以接触杂乱信息，包括知乎在内，微博段子抖音快手今日头条….通通不要看。因为接受杂乱无章的碎片信息会让你头脑混乱，毁掉一整天的状态。我上午一般不碰手机，也很少有人上午联系到我。</li><li>早晨应该立即投入到紧张、有序、逻辑化、体系化的工作中，并将专注的状态尽可能延续。很多名作家都有上午写作的习惯，毛姆上午写作，下午逛街看书，晚上会客；海明威上午站着写作，下午和晚上就读书、做采访；村上春树从早晨一直写到下午，独自闷在屋里，有时状态连贯甚至不吃午饭，自称“罐头工作法”；巴尔扎克最特殊，晚8点至12点睡觉，半夜12点起床一直写到中午12点，这样就把一天的开始与巴黎最安静的时段结合在一起了。我在巡讲中接触到许多优秀的企业家，他们往往也是最擅长利用上午的时间来处理重要的事务，而且乔布斯传记里也提到：乔布斯4点起床，一直专注于工作，绝不受任何打扰。因此古今中外的精英们都懂得利用好早晨才是利用好一天的关键。</li><li>早晨一定要吃早饭，这个不用多说了。<h2 id="中午篇"><a href="#中午篇" class="headerlink" title="中午篇"></a>中午篇</h2>想要保持午后状态良好，还是三件事:1.饮食 2.午休 3.运动先说饮食。</li><li>不要吃快速升高血糖的食物，不要吃太快吃太饱。碳水化合物、多油盐食物，都会让你血糖飞速上升，昏昏欲睡。午餐吃些鸡肉、蔬菜之类的最好不过。</li><li>再说午休。适量午休很重要，我一般睡20到40分钟，小憩之后，精神饱满。出外巡讲的时候，就在车里眯一会儿，在学校上课的时候，就在桌子上趴一会儿。</li><li>我最后说说运动。个人感觉下午是体力最充沛的时候，此时跑步健身半小时，能够增加氧气吸入量，提高多巴胺、去甲肾上腺素、血清素等脑内物质的浓度，对清醒头脑提升效率很有帮助。没有场地健身的话，爬楼梯也行。大声唱歌也有类似的效果。我在宿舍装了门上单杠，下午做些引体向上，很能调整状态。<h2 id="晚上篇"><a href="#晚上篇" class="headerlink" title="晚上篇"></a>晚上篇</h2>三件事:1.冥想 2.间歇 3.总结首先是冥想。</li><li>吃过晚饭，进入黄昏。经过一天的劳累谁都难免松懈。此时很重要的是“冥想”。国学大师钱穆先生每次舟车劳顿回到家中，都是冥想十五分钟，然后伏案工作。这里的冥想并不一定要像禅宗那样莲花坐，其实更像是“闭目养神”，眼观鼻鼻观心，去除杂念，收摄心神，从而提升效率与专注度。</li><li>再说间歇。晚上脑力体力都难以饱满，所以做事情要讲求间歇，“番茄工作法”是不错的选择，每25分钟休息5分钟，现在也有app作辅助了。不过还是要注意，不能死板地遵守番茄工作法。有些事情不是25分钟就能完成的，偏偏又很重要不能打断，所以必须适度延长时间。比如我写文章，一次就是两三小时，不敢中断，否则逻辑框架就会不完整。<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>最后是总结。总结可以写成日记，可以画成表格，总结你一天所做的事，写几句评价。不要太复杂，尽可能简洁。总结最好睡前做。睡前半小时内不要剧烈运动，不要做高强度脑力劳动（比如做数学题）。这样，就会有高效而充实的一天。把这样的一天又一天坚持下去，就必将走向优秀。我都是依靠时间管理的法则。管理好自己，你才能更强大。<br>与君共勉！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自我管理&quot;&gt;&lt;a href=&quot;#自我管理&quot; class=&quot;headerlink&quot; title=&quot;自我管理&quot;&gt;&lt;/a&gt;自我管理&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;学霸不会困，靠的不是体力，是自我管理.&lt;/strong&gt;&lt;br&gt;一天分成三个阶段，规律作息，精进细节，才可以
      
    
    </summary>
    
      <category term="blog" scheme="http://yanaries.github.io/categories/blog/"/>
    
    
      <category term="文章" scheme="http://yanaries.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>博客</title>
    <link href="http://yanaries.github.io/2018/07/17/my-new-post/"/>
    <id>http://yanaries.github.io/2018/07/17/my-new-post/</id>
    <published>2018-07-17T01:02:55.000Z</published>
    <updated>2018-07-17T01:08:09.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Aries-first"><a href="#Aries-first" class="headerlink" title="Aries first"></a>Aries first</h1><p><strong>新的起点，新的开始，加油</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Aries-first&quot;&gt;&lt;a href=&quot;#Aries-first&quot; class=&quot;headerlink&quot; title=&quot;Aries first&quot;&gt;&lt;/a&gt;Aries first&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;新的起点，新的开始，加油&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yanaries.github.io/2018/07/16/hello-world/"/>
    <id>http://yanaries.github.io/2018/07/16/hello-world/</id>
    <published>2018-07-16T08:56:22.275Z</published>
    <updated>2018-07-16T08:56:22.275Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
